# Upload and Load CSV
from google.colab import files
uploaded = files.upload()

import pandas as pd
df = pd.read_csv('historical_expenses_datetime.csv')

# Clean & Prepare
df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
df['Amount'] = pd.to_numeric(df['Amount'], errors='coerce')
df.dropna(subset=['Date', 'Amount'], inplace=True)

# Resample to daily totals
daily_df = df.resample('D', on='Date').sum().fillna(0)

# Check for empty DataFrame
if daily_df.empty:
    raise ValueError("❌ Error: Processed dataset is empty. Please check the input CSV format.")
# STEP 0: Install required libraries 
!pip install statsmodels

# STEP 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_absolute_error, mean_squared_error
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()

# STEP 2: Upload & Load CSV
from google.colab import files
uploaded = files.upload()

df = pd.read_csv('historical_expenses_datetime.csv')
# Convert 'Date' to datetime with flexible parsing
df['Date'] = pd.to_datetime(df['Date'], errors='coerce', format='mixed')

# Drop rows with invalid dates or amounts
df.dropna(subset=['Date', 'Amount'], inplace=True)


# STEP 3: Preprocess - Daily Totals
daily_df = df.resample('D', on='Date').sum().fillna(0)

# --- PART A: 90-DAY SARIMA FORECAST ---

# Train/test split (last 90 days as test)
train_90 = daily_df.iloc[:-90]
test_90 = daily_df.iloc[-90:]

# Fit SARIMA model
sarima_model = SARIMAX(train_90['Amount'], order=(1, 1, 1), seasonal_order=(1, 1, 1, 7))
sarima_result = sarima_model.fit(disp=False)

# Forecast next 90 days
forecast = sarima_result.get_forecast(steps=90)
forecast_df = forecast.summary_frame()
forecast_df = forecast_df[['mean', 'mean_ci_lower', 'mean_ci_upper']].apply(pd.to_numeric, errors='coerce')
forecast_df.dropna(inplace=True)

# Plot SARIMA Forecast
plt.figure(figsize=(14, 6))
plt.plot(train_90.index, train_90['Amount'], label='Train')
plt.plot(test_90.index, test_90['Amount'], label='Actual')
plt.plot(forecast_df.index, forecast_df['mean'], label='Forecast', color='green')
plt.fill_between(forecast_df.index,
                 forecast_df['mean_ci_lower'],
                 forecast_df['mean_ci_upper'],
                 color='green', alpha=0.2)
plt.title('90-Day Forecast using SARIMA')
plt.xlabel('Date')
plt.ylabel('Amount')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# --- PART B: 12-MONTH ROLLING FORECAST & ACCURACY METRICS ---

# Use last 365 days for evaluation
n_test_days = 365
train_roll = daily_df.iloc[:-n_test_days]
test_roll = daily_df.iloc[-n_test_days:]

history = train_roll['Amount'].tolist()
predictions = []

# Rolling forecast day-by-day
for t in range(len(test_roll)):
    model = SARIMAX(history, order=(1, 1, 1), seasonal_order=(1, 1, 1, 7))
    result = model.fit(disp=False)
    yhat = result.forecast()[0]
    predictions.append(yhat)
    history.append(test_roll['Amount'].iloc[t])

# Accuracy Metrics
actual = test_roll['Amount'].values
mae = mean_absolute_error(actual, predictions)
rmse = np.sqrt(mean_squared_error(actual, predictions))
mape = np.mean(np.abs((actual - predictions) / actual)) * 100

print(f"✅ 12-Month Rolling Forecast Accuracy:")
print(f"MAE  = {mae:.2f}")
print(f"RMSE = {rmse:.2f}")
print(f"MAPE = {mape:.2f}%")

# Plot Rolling Forecast vs Actual
plt.figure(figsize=(14, 6))
plt.plot(test_roll.index, actual, label='Actual', color='blue')
plt.plot(test_roll.index, predictions, label='Rolling Forecast', color='orange')
plt.title("12-Month Rolling Forecast vs Actual (SARIMA)")
plt.xlabel("Date")
plt.ylabel("Amount")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
